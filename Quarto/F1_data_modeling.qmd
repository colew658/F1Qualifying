---
title: "F1 Project Data Modeling"
author: "Cole Wagner"
format:
  html:
    toc: true
    self-contained: true
    code-fold: true
    code-line-numbers: true
    code-tools: true
    cache: true
    theme: "yeti"
editor: visual
---

```{r setup}
library(tidyverse)
library(tidymodels)
library(janitor)
set.seed(1)

full_no_missing <- read_csv("../Data/full_no_missing.csv")

full_clean_types <- full_no_missing %>%
  # Automatic conversion
  type_convert() %>%
  # Convert some numeric variables to factors
  mutate(
    MEETING_KEY = as.factor(MEETING_KEY),
    SESSION_KEY = as.factor(SESSION_KEY),
    DRIVER_NUMBER = as.factor(DRIVER_NUMBER),
    RAINFALL = as.factor(RAINFALL)
  )
```

# Apply the 107% rule to filter out "non-hot" laps

```{r filter107}
# Create a column to show if there was rain at any point in the session
# Also, find the cutoff time for each session
rain_cutoff <- full_clean_types %>%
  # Filter out any sessions that had rain
  group_by(SESSION_KEY) %>%
  summarise(
    rain_laps = sum(RAINFALL == 1),
    cutoff = min(LAP_DURATION) * 1.07
  ) %>%
  ungroup()

full_eng <- left_join(full_clean_types, rain_cutoff) %>%
  filter(LAP_DURATION < cutoff)
  
```


# Engineering the Outcome

The outcome variable is the difference between the actual lap time and the average lap time (given the track).

```{r outcomeengineer}
# Find the average lap time for each track
avg_time_summary <- full_eng %>%
  group_by(CIRCUIT_SHORT_NAME) %>%
  summarise(
    AVG_LAP_DURATION = mean(LAP_DURATION)
  ) %>%
  ungroup()

# Create the outcome TIME_DIFF
modeling_data <- left_join(full_eng, avg_time_summary) %>%
  mutate(TIME_DIFF = LAP_DURATION - AVG_LAP_DURATION) %>%
  # Keep only the variables needed for modeling
  select(c(13:19, 23, 33:35, 38))
```

# Base Model Pipeline

```{r basemodel}
base_rec <- recipe(TIME_DIFF ~ ., data = modeling_data) %>%
  step_normalize(all_numeric_predictors()) %>%
  step_dummy(all_nominal_predictors(), one_hot = F)

#Choose repeated 10-fold CV
kfold_rep <- vfold_cv(modeling_data, v = 10, repeats = 5, strata = "TIME_DIFF")

# Create linear regression model framework
f1_lm <- linear_reg() %>% 
  set_engine("lm") %>%
  set_mode("regression")

# Build the modeling workflow
lm_workflow <- workflow() %>%
  add_model(f1_lm) %>%
  add_recipe(base_rec)

# Resampled error rate
lm_res <- fit_resamples(
  lm_workflow,
  resamples = kfold_rep,
  metrics = metric_set(rmse, mae)
)

lm_res %>% collect_metrics()

# Extract coefficients
lm_coefs <- lm_workflow %>%
  fit(modeling_data) %>%
  extract_fit_parsnip() %>%
  tidy()
```

# Check assumptions

```{r lmassumptions}
lm_native <- extract_fit_engine(fit(lm_workflow, modeling_data))

plot(lm_native)

for (x in modeling_data[, -c(4, 8, 11)]) {
  plot(x, y = modeling_data$TIME_DIFF)
}
```
